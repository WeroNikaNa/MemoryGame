{"ast":null,"code":"var _jsxFileName = \"/Users/weronika/Desktop/magic-memory/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport Cards from \"./components/Cards\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cardImg = [{\n  \"src\": \"/img/1.jpg\",\n  \"matched\": false\n}, {\n  \"src\": \"/img/2.jpg\",\n  \"matched\": false\n}, {\n  \"src\": \"/img/3.jpg\",\n  \"matched\": false\n}, {\n  \"src\": \"/img/4.jpg\",\n  \"matched\": false\n}, {\n  \"src\": \"/img/5.jpg\",\n  \"matched\": false\n}, {\n  \"src\": \"/img/6.jpg\",\n  \"matched\": false\n}];\n\nfunction App() {\n  _s();\n\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  const [level, setLevel] = useState(1);\n  const [choice1, setChoice1] = useState(null);\n  const [choice2, setChoice2] = useState(null);\n  const [disabled, setDisabled] = useState(false);\n  const [winner, setWinner] = useState(false); //shuffle cards\n\n  const shuffleCards = () => {\n    let addedCard = [];\n\n    for (let i = 1; i <= level * 4; i++) {\n      console.log(\"adding one card\");\n      console.log(level);\n      console.log(i);\n      addedCard.push(cardImg[i]); // addedCard.push(cardImg[i]);\n    }\n\n    const shuffledCards = [...addedCard].sort(() => Math.random() - 0.5).map(card => ({ ...card,\n      id: Math.random()\n    })); // const shuffledCards = [...cardImg,...cardImg]\n    //     .sort(() => Math.random()-0.5)\n    //     .map((card)=>({...card, id: Math.random()}) )\n\n    setChoice1(null);\n    setChoice2(null);\n    setCards(shuffledCards);\n    setTurns(0);\n    setLevel(1);\n  }; //shuffle cards for the next level\n\n\n  const nextLevel = () => {\n    const nextLevel = [...cardImg, ...cardImg].sort(() => Math.random() - 0.5).map(card => ({ ...card,\n      id: Math.random()\n    }));\n    setChoice1(null);\n    setChoice2(null);\n    setCards(nextLevel);\n    setTurns(0);\n    setLevel(prevLevel => prevLevel + 1);\n    setWinner(false);\n  }; //handle a choice\n\n\n  const handleChoice = card => {\n    choice1 ? setChoice2(card) : setChoice1(card);\n  }; //reset & add turn\n\n\n  const oneMove = () => {\n    setChoice1(null);\n    setChoice2(null);\n    setTurns(prevTurns => prevTurns + 1);\n    setDisabled(false);\n  }; //check if round is over\n\n\n  const checkIfOver = () => {\n    let cardNrMatched = 0;\n    let cardNr = 0;\n    cards.map(card => {\n      if (card.matched === true) {\n        cardNrMatched++;\n      }\n\n      cardNr++;\n    });\n    cardNrMatched = cardNrMatched + 2;\n\n    if (cardNr === cardNrMatched) {\n      setWinner(true);\n      setTimeout(() => nextLevel(), 5500);\n    }\n  }; //start the game automatically\n\n\n  useEffect(() => {\n    shuffleCards();\n  }, []); //compare 2 cards\n\n  useEffect(() => {\n    if (choice1 && choice2) {\n      setDisabled(true);\n\n      if (choice1.src === choice2.src) {\n        //correct\n        setCards(prevCards => {\n          return prevCards.map(card => {\n            if (card.src === choice1.src) {\n              return { ...card,\n                matched: true\n              };\n            } else {\n              return card;\n            }\n          });\n        });\n        oneMove();\n      } else {\n        setTimeout(() => oneMove(), 1000);\n      }\n\n      checkIfOver();\n    }\n  }, [choice1, choice2]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Find Pairs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [winner && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"winner\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"CONGRATS! YOU GO TO THE NEXT LEVEL!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 47\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 23\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Your level: \", level, \",     Turns: \", turns]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: shuffleCards,\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }, this), cards && /*#__PURE__*/_jsxDEV(Cards, {\n      cards: cards,\n      handleChoice: handleChoice,\n      choice1: choice1,\n      choice2: choice2,\n      disabled: disabled\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"gm9TlTnd0X1uECAELMniE4EhV+Q=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/weronika/Desktop/magic-memory/src/App.js"],"names":["React","useState","useEffect","Cards","cardImg","App","cards","setCards","turns","setTurns","level","setLevel","choice1","setChoice1","choice2","setChoice2","disabled","setDisabled","winner","setWinner","shuffleCards","addedCard","i","console","log","push","shuffledCards","sort","Math","random","map","card","id","nextLevel","prevLevel","handleChoice","oneMove","prevTurns","checkIfOver","cardNrMatched","cardNr","matched","setTimeout","src","prevCards"],"mappings":"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","sourcesContent":["import './App.css'\nimport React, { useState, useEffect } from 'react';\nimport Cards from \"./components/Cards\";\n\nconst cardImg =[\n    {\"src\":\"/img/1.jpg\", \"matched\":false},\n    {\"src\":\"/img/2.jpg\", \"matched\":false},\n    {\"src\":\"/img/3.jpg\", \"matched\":false},\n    {\"src\":\"/img/4.jpg\", \"matched\":false},\n    {\"src\":\"/img/5.jpg\", \"matched\":false},\n    {\"src\":\"/img/6.jpg\", \"matched\":false},\n]\nfunction App() {\n    const [cards, setCards] = useState([])\n    const [turns, setTurns] = useState(0)\n    const [level, setLevel] = useState(1)\n    const [choice1, setChoice1] = useState(null)\n    const [choice2, setChoice2] = useState(null)\n    const [disabled, setDisabled] = useState(false)\n    const [winner, setWinner] = useState(false)\n\n    //shuffle cards\n    const shuffleCards = () => {\n        let addedCard=[];\n        for (let i=1;i<=level*4 ;i++){\n            console.log(\"adding one card\")\n            console.log(level)\n            console.log(i)\n            addedCard.push(cardImg[i]);\n            // addedCard.push(cardImg[i]);\n        }\n        const shuffledCards = [...addedCard]\n            .sort(() => Math.random()-0.5)\n            .map((card)=>({...card, id: Math.random()}) )\n        // const shuffledCards = [...cardImg,...cardImg]\n        //     .sort(() => Math.random()-0.5)\n        //     .map((card)=>({...card, id: Math.random()}) )\n\n        setChoice1(null)\n        setChoice2(null)\n        setCards(shuffledCards)\n        setTurns(0)\n        setLevel(1)\n    }\n\n    //shuffle cards for the next level\n    const nextLevel = () =>{\n        const nextLevel = [...cardImg,...cardImg]\n            .sort(() => Math.random()-0.5)\n            .map((card)=>({...card, id: Math.random()}) )\n        setChoice1(null)\n        setChoice2(null)\n        setCards(nextLevel)\n        setTurns(0)\n        setLevel(prevLevel => prevLevel + 1)\n        setWinner(false)\n    }\n\n    //handle a choice\n    const handleChoice = (card) => {\n        choice1 ? setChoice2(card) : setChoice1(card)\n    }\n\n    //reset & add turn\n    const oneMove = () => {\n        setChoice1(null)\n        setChoice2(null)\n        setTurns(prevTurns=>prevTurns +1)\n        setDisabled(false)\n\n    }\n\n    //check if round is over\n    const checkIfOver = () => {\n        let cardNrMatched = 0;\n        let cardNr = 0;\n        cards.map(card =>{\n            if(card.matched === true){\n                cardNrMatched ++;\n            }\n            cardNr++;\n        })\n\n        cardNrMatched=cardNrMatched + 2;\n        if(cardNr === cardNrMatched){\n            setWinner(true)\n            setTimeout(()=>nextLevel(), 5500)\n\n        }\n    }\n\n    //start the game automatically\n    useEffect(()=>{\n        shuffleCards()\n    },[])\n\n    //compare 2 cards\n    useEffect(()=>{\n\n        if(choice1 && choice2){\n            setDisabled(true)\n            if(choice1.src === choice2.src){\n                //correct\n                setCards(prevCards => {\n                    return prevCards.map(card =>{\n                        if(card.src === choice1.src){\n                            return{...card, matched: true}\n                        }\n                        else{\n                            return card\n                        }\n                    })\n                })\n                oneMove()\n            }\n            else {\n                setTimeout(()=>oneMove(), 1000)\n            }\n            checkIfOver()\n        }\n\n    },[choice1, choice2])\n\n\n  return (\n    <div className=\"App\">\n      <h1>Find Pairs</h1>\n        <div>\n            {winner &&<div className=\"winner\"><p>CONGRATS! YOU GO TO THE NEXT LEVEL!</p></div>}\n            <p>Your level: {level},     Turns: {turns}</p>\n            <button onClick={shuffleCards}>New Game</button>\n        </div>\n        {cards && <Cards cards={cards} handleChoice={handleChoice}\n                         choice1={choice1} choice2={choice2}\n                        disabled={disabled}/>}\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}